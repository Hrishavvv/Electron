let isRoot=!1,users={user:"12345"},currentUser="user",currentDir="~",authenticated=!1,promptElement=document.getElementById("prompt"),outputElement=document.getElementById("output"),inputElement=document.getElementById("input");const directories={"~":["bin","boot","dev","etc","home","lib","lib64","media","mnt","opt","proc","root","run","sbin","srv","sys","tmp","usr","var"]};function updatePrompt(){isRoot?(promptElement.textContent=`root@electron:${currentDir}# `,promptElement.style.color="red"):(promptElement.textContent=`${currentUser}@electron:${currentDir}$ `,promptElement.style.color="cyan")}async function executeCommand(e){let t="",n=e.split(" ");switch(n[0]){case"sudo":if("su"===n[1]){"12345"===prompt("Enter password for sudo: ")?(isRoot=!0,authenticated=!0,currentUser="root"):t="Authentication failure. Hint: 12345"}else if("apt"===n[1]&&"update"===n[2]||"update"===n[1])t=authenticated?"Updating package lists...\n[=========>.........] 50%\nUpdating package lists... Done.":"This command requires root privileges.";else if("apt"===n[1]&&"upgrade"===n[2]||"upgrade"===n[1])if(authenticated)if(n.includes("-y"))t="Upgrading packages...\n[====================] 100%\nUpgrading packages... Done.";else{t="y"===prompt("Do you want to continue? [Y/n]").toLowerCase()?"Upgrading packages...\n[====================] 100%\nUpgrading packages... Done.":"Operation cancelled."}else t="This command requires root privileges.";else t=`Command not found: ${e}`;break;case"ls":t=directories[currentDir].join(" ");break;case"cd":n[1]?".."===n[1]?currentDir=currentDir.split("/").slice(0,-1).join("/")||"~":directories[currentDir]&&directories[currentDir].includes(n[1])?currentDir=n[1]:t=`bash: cd: ${n[1]}: No such file or directory`:currentDir="~";break;case"pwd":t=currentDir;break;case"whoami":t=currentUser;break;case"uname":t="-a"===n[1]?"Electron v1.1.2 by Hrishav":"Usage: uname -a";break;case"python":t="--version"===n[1]?"Python 3.8.5":"Usage: python --version";break;case"adduser":if(n[1]){let e=n[1],r=prompt("Set a new password: ");r===prompt("Enter the password again: ")?(users[e]=r,t=`Added user ${e}.`):t="Passwords do not match. Try again."}else t="Usage: adduser <username>";break;case"login":if(n[1]){let e=n[1],r=prompt("Password: ");users[e]&&users[e]===r?(currentUser=e,t=`Logged in as ${e}`):t="Login incorrect"}else t="Usage: login <username>";break;case"exit":isRoot?(isRoot=!1,authenticated=!1,currentUser="user"):t="No more processes left to exit.";break;case"clear":return outputElement.innerHTML="","";case"ifconfig":t="eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500\n    inet 192.168.1.100  netmask 255.255.255.0  broadcast 192.168.1.255\n    inet6 fe80::a00:27ff:fe4e:66a1  prefixlen 64  scopeid 0x20<link>\n    ether 08:00:27:4e:66:a1  txqueuelen 1000  (Ethernet)\n    RX packets 215265  bytes 327264500 (312.1 MiB)\n    RX errors 0  dropped 0  overruns 0  frame 0\n    TX packets 155209  bytes 14030524 (13.3 MiB)\n    TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536\n    inet 127.0.0.1  netmask 255.0.0.0\n    inet6 ::1  prefixlen 128  scopeid 0x10<host>\n    loop  txqueuelen 1000  (Local Loopback)\n    RX packets 0  bytes 0 (0.0 B)\n    RX errors 0  dropped 0  overruns 0  frame 0\n    TX packets 0  bytes 0 (0.0 B)\n    TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0";break;case"trace":if("-m"===n[1])t=await fetchIpInfo();else if("-t"===n[1]&&n[2]){const e=n[2];t=await fetchIpInfo(e)}else t="Usage: trace -m | trace -t <IP address>";break;default:t=`Command not found: ${e}`}return t}async function fetchIpInfo(e=""){const t=await fetch(`https://ipapi.co/${e}/json/`),n=await t.json(),{ip:r,city:o,region:s,country_name:a,timezone:i,org:c,asn:p,latitude:u,longitude:l,utc_offset:d}=n;return`IP: ${r}\nCity: ${o}\nRegion: ${s}\nCountry: ${a}\nTimezone: ${i}\nLocal Time: ${(new Date).toLocaleString("en-US",{timeZone:i})}\nISP: ${c}\nASN: ${p}\nLatitude: ${u}\nLongitude: ${l}`}inputElement.addEventListener("keydown",(async function(e){if("Enter"===e.key){let e=inputElement.value,t=await executeCommand(e);outputElement.innerHTML+=t?`<div><span style="color:${promptElement.style.color};">${promptElement.textContent}</span> ${e}</div><div style="color:lime; text-align:left;">${t}</div>`:`<div><span style="color:${promptElement.style.color};">${promptElement.textContent}</span> ${e}</div>`,inputElement.value="",updatePrompt(),outputElement.scrollTop=outputElement.scrollHeight}})),updatePrompt();